
name: Publish logomaker to PyPI and TestPyPI

on:
  push:
    tags:
      - 'v*'  # version tags for PyPI
      - 'test*'  # test tags for TestPyPI
            
      
jobs:
  test:
    # This will run the tests for each Python version
    name: Run Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install pytest hatch

    - name: Configure matplotlib backend
      run: |
        mkdir -p $HOME/.config/matplotlib
        echo "backend: Agg" > $HOME/.config/matplotlib/matplotlibrc

    - name: Run tests
      run: |
        python -c "import logomaker; logomaker.run_tests()"

  
        
  build:
    name: Build
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Debug
      run: |
        echo "github.ref = ${{ github.ref }}"
        echo "github.event_name = ${{ github.event_name }}"
        echo "github.sha = ${{ github.sha }}"
        echo "github.base_ref = ${{ github.base_ref }}"
        echo "github.ref_type = ${{ github.ref_type }}"
        echo "github.ref_name = ${{ github.ref_name }}"
        
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0  # Get all history for branch checking
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine hatch
        
    - name: Build package
      run: python -m build
      
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions-${{ matrix.python-version }}
        path: dist/

  publish-to-pypi:
    name: >-
      Publish to PyPI

    needs:
      - build
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/logomaker

    permissions:
      id-token: write # needed for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: python-package-distributions-*
          merge-multiple: true
          path: dist/
      - name: Publish dist to PyPI
        if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
        uses: pypa/gh-action-pypi-publish@release/v1



  publish-to-testpypi:
    name: Publish to TestPyPI
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/logomaker

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        pattern: python-package-distributions-*
        merge-multiple: true
        path: dist/
    - name: Publish dist to TestPyPI
      if: github.ref_type == 'tag' && startsWith(github.ref_name, 'test')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/


  github-release:
    name: >-
      Sign the distribution with Sigstore
      and upload them to GitHub Release
    runs-on: ubuntu-latest
    needs:
      - publish-to-pypi
      - publish-to-testpypi
    if: >-
      always() && 
      (needs.publish-to-pypi.result == 'success' || needs.publish-to-testpypi.result == 'success')

    permissions:
      contents: write  # mandatory for making GitHub Releases
      id-token: write  # mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: python-package-distributions-*
          merge-multiple: true
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "$GITHUB_REF_NAME"
          --repo "$GITHUB_REPOSITORY"
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"
          




  
